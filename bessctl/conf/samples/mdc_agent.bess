# Copyright (c) 2014-2017, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy

SIMULATION = False

# used only when SIMULATION is True
GENERATE_TRAFFIC = True

num_cores = int($BESS_CORES!'1')

#for i in range(num_cores):
#    bess.add_worker(wid=i, core=i)


class MDCData(scapy.Packet):
    name = 'MulticastDataCenterData '
    fields_desc=[scapy.XByteField('mode', 0), scapy.X3BytesField('label' , 0)]


class MDCHealthCheck(scapy.Packet):
    name = 'MulticastDataCenterHealth '
    fields_desc=[scapy.XByteField('dummy', 0)]

# Data Pkt
DATA_PKT_SIZE = 1024
CONST_DATA_SIZE = 46

data_eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32', type=0xdeda)
labeled_data_mdc = MDCData(mode=0xff, label=0x111111)
unlabeled_data_mdc = MDCData(mode=0x0, label=0x0)
data_ip = scapy.IP(src='192.168.1.1', dst='10.0.0.1')
data_udp = scapy.UDP(sport=10001, dport=10002)
data_payload = b"\0" * (DATA_PKT_SIZE-CONST_DATA_SIZE)

unlabeled_data_pkt = data_eth/unlabeled_data_mdc/data_ip/data_udp/data_payload
unlabeled_data_pkt_bytes = bytes(unlabeled_data_pkt)

# labeled_data_pkt = data_eth/labeled_data_mdc/data_ip/data_udp/data_payload
# labeled_data_pkt_bytes = bytes(labeled_data_pkt)

# Health Check Control Pkt
hc_eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32', type=0xdedc)
hc_mdc = MDCHealthCheck(dummy=0x0)
hc_payload = 'hello'
hc_pkt = hc_eth/hc_mdc/hc_payload
hc_pkt_bytes = bytes(hc_pkt)

mdc_rec = MdcReceiver()
mdc_rec.add(entries=[{'addr': '06:16:3e:1b:72:32', 'label': 0x404040}])

mdc_pkt_gen_real = MdcPktGen(template=hc_pkt_bytes, pps=1e2)
mdc_hc = MdcHealthCheck()

# merger_inc = Merge()
#merger_out = Merge()

if SIMULATION:
    for i in range(num_cores):
        bess.add_worker(wid=i, core=i)
    
    merger_inc = Merge()
    merger_out = Merge()
    # used to simulate a response from ToR
    mdc_pkt_gen_virt = MdcPktGen(template=hc_pkt_bytes, pps=1e2)

    merger_virt = Merge()

    num_unlabeled_data_srcs = max(1, num_cores-1)

    for i in range(num_unlabeled_data_srcs):
        Source() -> Rewrite(templates=[unlabeled_data_pkt_bytes]) -> merger_inc

    Source() -> Rewrite(templates=[labeled_data_pkt_bytes]) -> merger_inc

    # receiving pkts
    mdc_pkt_gen_virt -> merger_virt
    merger_inc -> merger_virt -> mdc_rec
    mdc_rec:0 -> Dump(interval=1) -> merger_out -> Sink()
    mdc_rec:1 -> Dump(interval=1) -> Sink()

    # control path
    mdc_pkt_gen_real -> 0:mdc_hc
    mdc_rec:2 -> 1:mdc_hc -> merger_out
else:
    for i in range(num_cores):
        bess.add_worker(wid=i, core=i)

    port0::PMDPort(port_id=0, num_inc_q=2, num_out_q=1)
    port1::PMDPort(port_id=1, num_inc_q=1, num_out_q=1)

    port0_inc0::QueueInc(port=port0, qid=0)
    #port0_inc1::QueueInc(port=port0, qid=1)
    port1_inc0::QueueInc(port=port1, qid=0)

    port0_out0::QueueOut(port=port0, qid=0)
    #port0_out1::QueueOut(port=port0, qid=1)
    port1_out0::QueueOut(port=port1, qid=0)

    # merges pkts from all incoming ports, and sends them to mDC Receiver
    port0_inc0 -> mdc_rec
    # port0_inc1 -> mdc_rec
    # port1_inc0 -> merger_inc
    # Testing purposes 
    port1_inc0 -> Sink()
    #merger_inc -> mdc_rec

    # unlabeled data pkts and update-state ctrl pkts
    mdc_rec:0  -> port0_out0  # merger_out
    # labeled data
    mdc_rec:1  -> Sink()

    # health ctrl pkts
    #mdc_pkt_gen_real -> 0:mdc_hc
    #mdc_rec:2 -> 1:mdc_hc -> port0_out1  # merger_out

    # Sends all outgoing pkts to port0
    # merger_out -> port0_out1
    
    # port0_inc0.attach_task(wid=1)
    # port1_inc0.attach_task(wid=2)
    # mdc_pkt_gen.attach_task(wid=3)
    # port0_out0.attach_task(wid=3)
    # port1_out0.attach_task(wid=4)

    if GENERATE_TRAFFIC:
        tgen_pkt_rate = 10 * 1e9 / (8 * (DATA_PKT_SIZE + 24)) #  0.750 * 1e6
        bess.add_tc('tgen', wid=5, policy='rate_limit', resource='packet', limit={'packet': int(tgen_pkt_rate)})

        # creates a source, and limits its pkt rate
        tgen_src::Source()
        tgen_src.attach_task('tgen')

        # sends generated traffic on port1
        tgen_src -> Rewrite(templates=[unlabeled_data_pkt_bytes]) -> port1_out0

    #port0_inc0.attach_task(wid=1)
    #port0_inc1.attach_task(wid=2)
    port1_inc0.attach_task(wid=3)
    #mdc_pkt_gen_real.attach_task(wid=3)
