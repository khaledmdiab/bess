# Copyright (c) 2014-2017, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy


class MDCData(scapy.Packet):
    name = 'MulticastDataCenterData '
    fields_desc=[scapy.XByteField('mode', 0), scapy.X3BytesField('label' , 0)]

class MDCHealthCheck(scapy.Packet):
    name = 'MulticastDataCenterHealth '
    fields_desc=[scapy.XByteField('dummy', 0)]

# Data Pkt
data_eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32', type=0xdeda)
data_mdc = MDCData(mode=0x0, label=0x0)
data_ip = scapy.IP(src='192.168.1.1', dst='10.0.0.1')
data_udp = scapy.UDP(sport=10001, dport=10002)
data_payload = 'helloworld'
data_pkt = data_eth/data_mdc/data_ip/data_udp/data_payload
data_pkt_bytes = bytes(data_pkt)

# Health Check Control Pkt
hc_eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32', type=0xdedc)
hc_mdc = MDCHealthCheck(dummy=0x0)
hc_payload = 'hello'
hc_pkt = hc_eth/hc_mdc/hc_payload
hc_pkt_bytes = bytes(hc_pkt)

mdc_rec = MdcReceiver()
mdc_rec.add(entries=[{'addr': '06:16:3e:1b:72:32', 'label': 0xCCCCCC}])

mdc_pkt_gen = MdcPktGen(template=hc_pkt_bytes, pps=1e2)

mdc_hc = MdcHealthCheck()


# receiving pkts
Source() -> Rewrite(templates=[data_pkt_bytes]) -> mdc_rec
mdc_rec:0 -> Dump(interval=1) -> Sink()

# control path
mdc_pkt_gen -> 0:mdc_hc
mdc_rec:1 -> 1:mdc_hc -> Sink()

# test
# mdc_pkt_gen -> Dump(interval=1) -> Sink()

