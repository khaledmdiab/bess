# Copyright (c) 2014-2017, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


#AGENT_ID = 0x01
#SWITCH_MAC = '0a:23:5e:9c:b1:5c'
#AGENT_MAC = '0a:b2:17:d3:c2:d6'
#SWITCH_IP = '172.31.1.107'
#AGENT_IP = '172.31.7.206'


AGENT_ID = 0x02
AGENT_NIC = ''
SWITCH_MAC = '0a:4e:2e:be:cb:52'
AGENT_MAC = '0a:34:b9:2e:27:10'
SWITCH_IP = '172.31.8.238'
AGENT_IP = '172.31.11.133'


num_cores = int($BESS_CORES!'20')


print('Core count = %d' % num_cores)

# If in NUMA system, ensure to use CPU cores in the same socket of your NIC.
# TODO: this needs to depend on the CPU layout and where the NIC is
start_core = 0
for i in range(num_cores):
    bess.add_worker(wid=i, core=i + start_core)

port0::PMDPort(pci=AGENT_NIC)
port0_inc0::QueueInc(port=port0, qid=0)
port0_out0::QueueOut(port=port0, qid=0)

mdc_rec::AwsMdcReceiver(agent_id=AGENT_ID,
                        switch_mac=SWITCH_MAC,
                        agent_mac=AGENT_MAC,
                        switch_ip=SWITCH_IP,
                        agent_ip=AGENT_IP)

# Adds (session address, label) tuples to the MdcReceiver module
mdc_rec.add(entries=[{'addr': '1a:1b', 'label': 0x03}])

port0_inc0 -> mdc_rec
mdc_rec:0 -> port0_out0
mdc_rec:1 -> rec1_mypkts::Sink()


#import scapy.all as scapy


#CONST_DATA_SIZE = 46
#data_pkt_size = 128
## Data pkt
#class MDCData(scapy.Packet):
#    name = 'MulticastDataCenterData '
#    fields_desc = [scapy.ShortField('addr', 0),
#                   scapy.XByteField('mode', 0),
#                   scapy.XByteField('label', 0)]


# Data pkt template
#data_eth = scapy.Ether(src=AGENT_MAC, dst=SWITCH_MAC, type=0x0800)
#data_ip = scapy.IP(src=AGENT_IP, dst=SWITCH_IP)
#data_udp = scapy.UDP(sport=10001, dport=10002)
#unlabeled_data_mdc = MDCData(addr=0x1a1b, mode=0x0, label=0x0)
#data_payload = bytes(unlabeled_data_mdc) + b"\0" * (data_pkt_size - CONST_DATA_SIZE)
#unlabeled_data_pkt = data_eth / data_ip / data_udp / data_payload
#unlabeled_data_pkt_bytes = bytes(unlabeled_data_pkt)



#tgen_pkt_rate = 0.05 * 1e9 / (8 * (data_pkt_size + 24))
#bess.add_tc('tgen', policy='rate_limit', resource='packet', limit={'packet': int(tgen_pkt_rate)})
# # Creates a source, and limits its pkt rate
#tgen_src::Source()
#tgen_src.attach_task('tgen')
## Sends generated traffic on Port1
#tgen_src -> Rewrite(templates=[unlabeled_data_pkt_bytes]) -> port0_out0





#bpf::BPF()
#bpf.add(filters=[{'filter':'arp', 'gate':0}])
#bpf.add(filters=[{'filter':'ip and udp', 'gate':1}])

#arp::ArpResponder()
#arp.add(ip=AGENT_IP, mac_addr=AGENT_MAC)

#port0_inc0 -> bpf
#bpf:0 -> arp -> port0_out0
#bpf:1 -> mdc_rec
